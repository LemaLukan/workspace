package assign5Package;

import java.util.ArrayList;

public class ArrayListWithIterators extends AbstractList {
	
	private ArrayList<Integer> table;
	private int numElementsInTable = 0;
	@Override
	public AbstractIterator createIterator(int numElements) {
		return new Iterator(numElements);
	}

	@Override
	public void append(int v) {
		// TODO Auto-generated method stub
		
	}
	
	public ArrayListWithIterators()
	{
		table = new ArrayList<Integer>(100);
	}
	
	public class Iterator extends AbstractIterator
	{
		private Integer result[];
		private int currentElement;
		private int numElementsInResult = 0; // Stores the number of elements in result
		private boolean endOfTable;
		
		public Iterator(int n)
		{
			result = new Integer[n]; // result stores the array to be returned
			for (int i = 0; i < numElementsInTable && i < n; i++){
				result[i] = table.get(i);
			}
		}

		@Override
		public void first() {
			
		}

		@Override
		public void next() {
			// TODO Auto-generated method stub
			
		}

		@Override
		public boolean isDone() {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public Integer currentItem() {
			// TODO Auto-generated method stub
			return null;
		}
		private void insertSort(Integer newElement, Integer result[]){
			Integer tempValue1, tempValue2;
			int positionForNewElement = 0; // position where newElement has to be stored
			
			boolean flag = true; // flag is true as long as the position to insert newElement in result
			// has not been determined
			if (numElementsInResult == 0) {
				result[0] = newElement;
				numElementsInResult =  1;
			}
			else {
				for (int i = 0; (i < numElementsInResult) && flag; i++){
					if (result[i] < newElement){
						positionForNewElement = i;
						flag = false;
					}

					if (!flag){// position for new element has been determined
						tempValue1 = result[positionForNewElement];
						result[positionForNewElement] = newElement;
						for (int j = positionForNewElement + 1 ; j < numElementsInResult; j++){
							tempValue2 = result[j];
							result[j] = tempValue1;
							tempValue1 = tempValue2;
						}
						if (numElementsInResult < result.length) // Save the last element if there is space in result
							result[numElementsInResult] = tempValue1;
					}
					else if (numElementsInResult < result.length){// newElement is larger than the last element in result.
						result[numElementsInResult] = newElement;
					}

				}
				if (numElementsInResult < result.length) numElementsInResult ++;
			}
		}
	}

}
